{
  "tech_stack": [
    "TypeScript",
    "React",
    "Python",
    "Django",
    "Django REST Framework",
    "PostgreSQL",
    "SQLite",
    "Firebase Authentication",
    "Google Maps API",
    "GROQ AI API",
    "TailwindCSS",
    "Docker",
    "Node.js",
    "HTML2Canvas",
    "jsPDF",
    "Axios",
    "React Router",
    "Gunicorn",
    "Nginx"
  ],
  "features": [
    {
      "name": "Authentication System",
      "description": "Firebase-based user authentication with email/password and Google OAuth support, including protected routes and session management",
      "files": [
        "frontend/src/contexts/AuthContext.tsx",
        "frontend/src/components/Login.tsx",
        "frontend/src/components/Signup.tsx",
        "frontend/src/firebase.ts",
        "backend/travel_app/middleware.py"
      ]
    },
    {
      "name": "AI Itinerary Generator",
      "description": "Main form component for creating personalized travel itineraries using GROQ AI API with destination and duration inputs",
      "files": [
        "frontend/src/components/ItineraryForm.tsx",
        "backend/travel_app/views.py",
        "backend/travel_app/utils.py"
      ]
    },
    {
      "name": "Itinerary History Management",
      "description": "User-specific itinerary viewing, management, and retrieval system with CRUD operations",
      "files": [
        "frontend/src/components/History.tsx",
        "backend/travel_app/views.py",
        "backend/travel_app/models.py",
        "backend/travel_app/serializers.py"
      ]
    },
    {
      "name": "Interactive Map Integration",
      "description": "Google Maps integration for displaying travel destinations, locations extraction from itineraries, and interactive map visualization",
      "files": [
        "frontend/src/components/Map.tsx",
        "frontend/src/components/MapView.tsx"
      ]
    },
    {
      "name": "PDF Export Functionality",
      "description": "HTML-to-PDF conversion system for exporting and sharing itineraries using HTML2Canvas and jsPDF",
      "files": [
        "frontend/src/components/ItineraryForm.tsx",
        "frontend/src/components/History.tsx"
      ]
    },
    {
      "name": "REST API Backend",
      "description": "Django REST Framework API providing endpoints for itinerary CRUD operations, user management, and AI integration",
      "files": [
        "backend/travel_app/views.py",
        "backend/travel_app/urls.py",
        "backend/travel_app/serializers.py",
        "backend/travel_planner/urls.py"
      ]
    },
    {
      "name": "Data Models and Database",
      "description": "Django ORM models for itinerary data storage with PostgreSQL production and SQLite development databases",
      "files": [
        "backend/travel_app/models.py",
        "backend/travel_planner/settings.py"
      ]
    },
    {
      "name": "Protected Route System",
      "description": "React Router-based route protection ensuring authenticated access to application features",
      "files": [
        "frontend/src/App.tsx"
      ]
    },
    {
      "name": "Responsive UI Components",
      "description": "TailwindCSS-styled React components with dark mode support and responsive design",
      "files": [
        "frontend/src/components/ItineraryForm.tsx",
        "frontend/src/components/History.tsx",
        "frontend/src/components/MapView.tsx",
        "frontend/src/components/Login.tsx",
        "frontend/src/components/Signup.tsx",
        "frontend/src/App.css",
        "frontend/src/index.css",
        "frontend/tailwind.config.js"
      ]
    },
    {
      "name": "Environment Configuration",
      "description": "Multi-environment configuration system with Docker containerization and environment variable management",
      "files": [
        "docker-compose.yml",
        "frontend/Dockerfile",
        "backend/Dockerfile",
        "frontend/.env.example",
        "backend/.env.example",
        "backend/travel_planner/settings.py"
      ]
    },
    {
      "name": "CORS and Security Configuration",
      "description": "Cross-origin resource sharing configuration and security middleware for frontend-backend communication",
      "files": [
        "backend/travel_planner/settings.py",
        "backend/travel_app/middleware.py"
      ]
    },
    {
      "name": "Type Definitions and Interfaces",
      "description": "TypeScript type definitions and interfaces for data models and component props",
      "files": [
        "frontend/src/types.ts",
        "frontend/src/types/index.ts",
        "frontend/src/env.d.ts",
        "frontend/src/react-app-env.d.ts"
      ]
    },
    {
      "name": "Location Services and Geocoding",
      "description": "Google Maps API integration for location extraction, geocoding, and smart location categorization from itinerary text",
      "files": [
        "frontend/src/components/Map.tsx",
        "frontend/src/components/MapView.tsx"
      ]
    },
    {
      "name": "Error Handling and Validation",
      "description": "Comprehensive error handling, input validation, and user feedback systems across frontend and backend",
      "files": [
        "backend/travel_app/utils.py",
        "backend/travel_app/serializers.py",
        "frontend/src/components/ItineraryForm.tsx",
        "frontend/src/components/Login.tsx",
        "frontend/src/components/Signup.tsx"
      ]
    }
  ]
}